using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Distributr.Core.Domain.Master.ProductEntities;
using Distributr.Core.Domain.Transactional.DocumentEntities;
using Distributr.Core.Repository.Transactional.DocumentRepositories.InventoryRepositories;
using Distributr.Core.Utility;
using Distributr.WPF.Lib.Services.DocumentReports;
using Distributr.WPF.Lib.Services.DocumentReports.GRN;
using Distributr.WPF.Lib.Services.DocumentReports.Order;

namespace Distributr.WPF.Lib.ViewModels.PrintableDocuments
{
    public partial class DocumentReportViewerViewModel
    {
        public GRNReportContainer GetGRNData(Guid grnId)
        {
            using (StructureMap.IContainer c = NestedContainer)
            {
                var grn = Using<IInventoryReceivedNoteRepository>(c).GetById(grnId);
                GRNReportContainer cont = new GRNReportContainer();
                cont.CompanyHeader = new CompanyHeaderReport();
                cont.DocumentHeader = new GRNHeader
                                          {
                                              DatePrinted = DateTime.Now,
                                              DateReceived = grn.DocumentDateIssued,
                                              LoadNumber = grn.LoadNo,
                                              DocumentReference = grn.DocumentReference,
                                              OrderReference = grn.OrderReferences,
                                              DocumentIssuerCCName = grn.DocumentIssuerCostCentre.Name,
                                              DocumentIssuerUserName = grn.DocumentIssuerUser.Username,
                                              DocumentRecipientCCName = grn.DocumentRecipientCostCentre.Name,
                                              TotalCost = grn.LineItems.Sum(x => (x.Value*x.Qty))
                                          };

                int i = 1;
                foreach (var item in grn.LineItems)
                {
                    var gitem = new GRNReportLineItem
                                    {
                                        RowNumber = i,
                                        ProductName = item.Product.Description,
                                        UnitCost = item.Value,
                                        ReceivedQty = item.Qty,
                                        ExpectedQty = item.Expected,
                                        TotalCost = (item.Qty*item.Value),
                                        LineItemInfo = StringUtils.BreakUpperCB(item.Product.GetType()
                                                                                    .ToString().Split('.').Last())
                                    };
                    cont.LineItems.Add(gitem);
                    i++;
                }

                cont.DocumentHeader.DocumentIssuerDetails = "Generated by: " + cont.DocumentHeader.DocumentIssuerUserName + " ; Cost centre: " +
                                                 cont.DocumentHeader.DocumentIssuerCCName + "; Date: " +
                                                 cont.DocumentHeader.DatePrinted.ToShortDateString();
                return cont;
            }
        }
    }
}
