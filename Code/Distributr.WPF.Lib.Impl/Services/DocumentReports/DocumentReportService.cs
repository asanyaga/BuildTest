using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Distributr.Core.Domain.Master.CostCentreEntities;
using Distributr.Core.Domain.Transactional;
using Distributr.Core.Domain.Transactional.DocumentEntities;
using Distributr.Core.Domain.Transactional.DocumentEntities.LineItems;
using Distributr.Core.Domain.Transactional.DocumentEntities.OrderDocumentEntities;
using Distributr.Core.Repository.Master.CostCentreRepositories;
using Distributr.Core.Repository.Transactional.DocumentRepositories.DispatchRepositories;
using Distributr.Core.Repository.Transactional.DocumentRepositories.IInvoiceRepositories;
using Distributr.Core.Repository.Transactional.DocumentRepositories.OrderRepositories;
using Distributr.Core.Repository.Transactional.DocumentRepositories.ReceiptInventories;
using Distributr.Core.Utility;
using Distributr.WPF.Lib.Services.DocumentReports;
using Distributr.WPF.Lib.Services.DocumentReports.Receipt;
using Distributr.WPF.Lib.Services.Service.DocumentReports;
using DocumentLineItem = Distributr.WPF.Lib.Services.DocumentReports.OrderReportLineItem;

namespace Distributr.WPF.Lib.Impl.Services.DocumentReports
{
    public class DocumentReportService : IDocumentReportService
    {
        private IMainOrderRepository _mainOrderRepository;
        private IDispatchNoteRepository _dispatchNoteRepository;
        private IOrderRepository _orderRepository;
        private IInvoiceRepository _invoiceRepository;
        private IReceiptRepository _receiptRepository;
        private ICostCentreRepository _costCentreRepository;

        public DocumentReportService(IMainOrderRepository mainOrderRepository, IDispatchNoteRepository dispatchNoteRepository, IOrderRepository orderRepository, IInvoiceRepository invoiceRepository, IReceiptRepository receiptRepository, ICostCentreRepository costCentreRepository)
        {
            _mainOrderRepository = mainOrderRepository;
            _dispatchNoteRepository = dispatchNoteRepository;
            _orderRepository = orderRepository;
            _invoiceRepository = invoiceRepository;
            _receiptRepository = receiptRepository;
            _costCentreRepository = costCentreRepository;
        }

        public DocumentReportContainer GetOrderData(Guid orderId)
        {
            MainOrder mainorder = _mainOrderRepository.GetById(orderId);

            return MapOrder(mainorder);
        }

        public DocumentReportContainer GetDispatchNote(Guid dispatchNoteId)
        {
            DispatchNote dn = _dispatchNoteRepository.GetById(dispatchNoteId);
            return MapDispatchNote(dn);
        }

        

        

        DocumentReportContainer MapDispatchNote(DispatchNote dispatchNote)
        {
            DocumentReportContainer docData = new DocumentReportContainer();
            MainOrder mainOrder = _mainOrderRepository.GetById(dispatchNote.OrderId);
            DocumentHeader docHeader = new DocumentHeader()
            {
                DatePrinted = DateTime.Now,
                DateRequired = dispatchNote.StartDate,
                DocumentIssuerUserName = dispatchNote.DocumentIssuerUser.Username,
                DocumentIssuerCCName = dispatchNote.DocumentIssuerCostCentre.Name,
                DocumentReference = dispatchNote.DocumentReference,
                RouteName = ((Outlet)mainOrder.IssuedOnBehalfOf).Route.Name,
                SalesmanName = dispatchNote.DocumentRecipientCostCentre.Name,
                StatusStr = dispatchNote.Status.ToString(),
                TotalNet = dispatchNote.TotalNet,
            };
            docHeader.DocumentIssuerDetails = "Generated by: " + docHeader.DocumentIssuerUserName + " ; Cost centre: " +
                                             docHeader.DocumentIssuerCCName + "; Date: " +
                                             docHeader.DatePrinted.ToShortDateString();
            docData.DocumentHeader = docHeader;
            int i = 0;
            //foreach (var item in dispatchNote.LineItems)
            //{

            //    DocumentLineItem li = new DocumentLineItem
            //                              {
            //                                  DiscountType =
            //                                      (item.DiscountType == DiscountType.None
            //                                           ? StringUtils.BreakUpperCB(
            //                                               item.Product.GetType().ToString().Split('.').Last())
            //                                           : StringUtils.BreakUpperCB(item.DiscountType.ToString())),
            //                                  LineItemTypeStr = item.LineItemType.ToString(),
            //                                  ProductName = item.Product.Description,
            //                                  Qty = item.Qty,
            //                                  RowNumber = i + 1,
            //                                  TotalNet = item.LineItemTotal,
            //                                  TotalVat = item.LineItemVatTotal,
            //                                  UnitDiscount = item.ProductDiscount,
            //                                  UnitPrice = item.Value,
            //                                  UnitVat = item.LineItemVatValue,
            //                                  GrossAmount = item.LineItemTotal + item.LineItemVatTotal,
            //                              };
            //    docData.LineItems.Add(li);
            //    i++;
            //}

            foreach (var item in mainOrder.DispatchedLineItems)
            {
                OrderReportLineItem li = new DocumentLineItem()
                {
                    ApprovedQuantity = item.ApprovedQuantity,
                    BackOrderQuantity = item.BackOrderQuantity,

                    DiscountType =
                        (item.DiscountType == DiscountType.None
                             ? StringUtils.BreakUpperCB(
                                 item.Product.GetType().ToString().Split('.').Last())
                             : StringUtils.BreakUpperCB(item.DiscountType.ToString())),

                    DispachedQuantity = item.DispatchedQuantity,
                    GrossAmount = item.LineItemTotal,
                    LineItemTypeStr = item.LineItemType.ToString(),
                    LostSaleQuantity = item.LostSaleQuantity,
                    ProductName = item.Product.Description,
                    Qty = item.Qty,
                    RowNumber = i + 1,
                    TotalNet = item.TotalNetPrice,
                    TotalVat = item.LineItemVatTotal,
                    UnitDiscount = item.ProductDiscount,
                    UnitPrice = item.Value,
                    UnitVat = item.LineItemVatValue,
                };
                docData.LineItems.Add(li);
                i++;
            }
            return docData;
        }

        DocumentReportContainer MapOrder(MainOrder mainorder)
        {
            DocumentReportContainer docData = new DocumentReportContainer();

            DocumentHeader docHeader = new DocumentHeader()
            {
                AmountPaid = mainorder.PaidAmount,
                Comment = mainorder.Note,
                DatePrinted = DateTime.Now,
                DateRequired = mainorder.DateRequired,
                DocumentIssuerUserName = mainorder.DocumentIssuerUser.Username,
                DocumentIssuerCCName = mainorder.DocumentIssuerCostCentre.Name,
                DocumentReference = mainorder.DocumentReference,
                IssuedOnBehalfOfName = mainorder.IssuedOnBehalfOf.Name,
                OrderTypeStr = mainorder.OrderType.ToString(),
                OutstandingAmount = mainorder.OutstandingAmount,
                ParentId = mainorder.ParentId,
                RouteName = ((Outlet)mainorder.IssuedOnBehalfOf).Route.Name,
                SaleDiscount = mainorder.SaleDiscount,
                SalesmanName = mainorder.DocumentRecipientCostCentre.Name,
                ShipToAddress = mainorder.ShipToAddress,
                StatusStr = mainorder.Status.ToString(),
                TotalGross = mainorder.TotalGross,
                TotalNet = mainorder.TotalNet,
                TotalProductDiscount = mainorder.TotalDiscount,
                TotalSaleDiscount = mainorder.TotalDiscount,
                TotalVat = mainorder.TotalVat,
            };
            docHeader.DocumentIssuerDetails = "Generated by: " + docHeader.DocumentIssuerUserName + " ; Cost centre: " +
                                             docHeader.DocumentIssuerCCName + "; Date: " +
                                             docHeader.DatePrinted.ToShortDateString();
            docData.DocumentHeader = docHeader;
            int i = 0;
            foreach (var item in mainorder.ItemSummary)
            {
                OrderReportLineItem li = new DocumentLineItem()
                {
                    ApprovedQuantity = item.ApprovedQuantity,
                    BackOrderQuantity = item.BackOrderQuantity,
                    DiscountType = StringUtils.BreakUpperCB(item.Product.GetType().ToString().Split('.').Last()),
                    GrossAmount = item.TotalGross,
                    LineItemTypeStr = item.LineItemType.ToString(),
                    LostSaleQuantity = item.LostSaleQuantity,
                    ProductName = item.Product.Description,
                    Qty = item.Qty,
                    RowNumber = i + 1,
                    TotalNet = item.TotalNet,
                    TotalVat = item.TotalVat,
                    UnitDiscount = item.ProductDiscount,
                    UnitPrice = item.Value,
                    UnitVat = item.VatValue,
                };
                docData.LineItems.Add(li);
                i++;
            }

            return docData;
        }

    }
}
